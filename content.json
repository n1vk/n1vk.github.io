{"meta":{"title":"Sheep's Blog","subtitle":"","description":"","author":"Yang","url":"https://n1vk.github.io","root":"/"},"pages":[{"title":"","date":"2022-03-28T12:17:05.975Z","updated":"2022-03-28T12:17:05.975Z","comments":true,"path":"404.html","permalink":"https://n1vk.github.io/404.html","excerpt":"","text":"404 您来到了无人之境 再试试别的吧..."},{"title":"关于本站","date":"2020-10-19T14:58:27.000Z","updated":"2022-03-28T12:01:26.383Z","comments":false,"path":"about/index.html","permalink":"https://n1vk.github.io/about/index.html","excerpt":"","text":"站长邮箱：&#118;&#x61;&#x6c;&#108;&#x68;&#97;&#x6c;&#108;&#97;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109; 本站由 Github Pages 托管，使用 Hexo 模版建立，主题是 Volantis。 没有人为本站提供域名服务。 本站素材来自 Flaticon 的 Freepik，推特开源项目 Twemoji，博客模版 Volantis 和我的猫猫。"},{"title":"按分类查看文章","date":"2020-10-20T09:27:11.075Z","updated":"2020-10-20T09:27:11.075Z","comments":false,"path":"categories/index.html","permalink":"https://n1vk.github.io/categories/index.html","excerpt":"","text":""},{"title":"按标签查看文章","date":"2020-10-20T09:27:33.650Z","updated":"2020-10-20T09:27:33.650Z","comments":false,"path":"tags/index.html","permalink":"https://n1vk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"设计模式：基本思想与策略模式","slug":"design-pattern-0","date":"2022-03-28T12:21:57.000Z","updated":"2022-03-28T15:59:35.748Z","comments":false,"path":"技术/design-pattern-0/","link":"","permalink":"https://n1vk.github.io/%E6%8A%80%E6%9C%AF/design-pattern-0/","excerpt":"学习 Head First Design Pattern，并试图把书上的废话凝练成我自己的废话。","text":"知道继承，接口，多态和虚类不能让你学会面向对象程序设计。理解设计模式，因为设计模式是面向对象开发工程师们多年以来程序设计的经验总结，是为了解决问题而产生的历经验证的工程通用解决方案。良好的设计模式会包含可复用，可扩充，可维护三个特性，而模式可以帮我们做到这点。 首先来举个简单的例子，来展示继承所不能解决的问题。如图，某游戏公司程序员为自己游戏的职业系统设计了一个 Player 超类，所有的职业都会继承这个超类。在继承时，也会继承超类内所有的方法。如果需要新的职业，那么我们就添加一个新的类。完美！ 美丽的UML图 现在公司抛出了新的需求：要求玩家应该会闪避。这很好办，只需要在超类里加入一个 dodge() 方法即可。但是在测试的时候发现了新的问题：牧师会闪避导致了他过于强大的生存能力，以至于不需要队友保护他。这和游戏的设计理念不太符合，公司要求程序员让牧师不再会闪避。这也很简单，把 Priest 的 dodge() 方法的具体实现覆盖成什么都不做就可以了。到目前为止，一切都很好… 直到程序员意识到，公司为了赚钱每个月都会推出一款新职业，他们有的专注攻击不能防御，有的利用防御来攻击，有的……噢还有，公司还会推出氪金装备，使得 Priest 可以有限次的进行闪避动作。天啊，这要怎么办？来看看我们从最初的设计原则可以推出什么。 变与不变应用设计的第一个原则：找出应用中需要变化之处，将其独立，不要和不需要变化的代码写在一起。这样，每次新的需求来到，我们就可以不修改固定的部分，只修改变化的部分。 对于我们的游戏设计来说，我们知道 dodge() 是会随着职业的不同而改变的（当然 attack() 和 defense() 也会变，但是原理是一样的 ）。那么我们把闪避行为拿出来，并为它创建一个类。所有的职业都将 HAS-A 闪避行为。 为谁而写应用设计的第二个原则：针对接口编程，不要针对实现编程。 说真的，我觉得这句话刚一看到非常难理解。 什么是实现？职业类如果实现了 dodge() 接口，那么就意味着所有职业都要实现这个接口，因为他们都继承自原始的超类。我们不要把什么类能实现什么在最开始的时候写死。 怎么针对接口编程？我设计一个 DodgeBehaviour 接口，此接口有 dodge() 方法。现在，我们让具体的类实现这个接口。DodgeNormal 类会正常的躲避，而 DodgeNaught 类什么都不做。现在，闪避行为和 Player 类没有任何关系了。我们可以随意添加闪避行为或者修改行为，比如我们为法师设计一个 DodgeKUXUAN，让闪避的时候会增加粒子效果。 另一个美丽的UML图 完成设计现在事情可能会变得有点奇怪，我们如何让某个职业进行闪避？请看代码： 12345678910public class Player &#123; healthType Health; DodgeBehaviour dodgeBehaviour; //... public void performDodge() &#123; dodgeBehaviour.dodge(); &#125;&#125; 这是我们的超类。看，我们通过让职业 HAS-A 行为的方式成功地托管了闪避行为！这也就引出了我们的第三个设计原则：多用组合，少用继承。HAS-A is better than IS-A! 那么相对应的，子类的代码： 12345public class Priest extends Player &#123; public Priest() &#123; dodgeBehaviour = new DodgeNaught(); &#125;&#125; 在构造函数里面，我们写好 Priest 会使用哪种 实现了 DodgeBahaviour 的类。不仅如此，如果我们对 dodgeBehaviour 设定一个 setter 函数，我们就可以在程序运行时改变牧师躲避的行为，比如牧师装备了氪金道具，那么就将 dodgeBehaviour 设定成可以闪避并计数，结束后改回去。这比写一个 ”可以进行10次闪避” 的 Priest 职业好太多了！ 同理，攻击和防御方法都可以用相同的方式实现。以上的设计模式我们称为策略模式。策略模式定义且封装了独立于使用算法客户的算法族，使他们相互之间能够替换。这也不意味着继承方法真的没用了，比如所有的职业都需要走路，那么 walk() 方法就可以继承。关键点是确立好需求，并选择你需要的设计模式。 （所以，这位程序员该好好跟他的产品经理吵一架 :P ）","categories":[{"name":"技术","slug":"技术","permalink":"https://n1vk.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"重新记录我的博客","slug":"placeholder","date":"2022-03-27T15:34:49.000Z","updated":"2022-03-28T15:58:24.603Z","comments":false,"path":"随想/placeholder/","link":"","permalink":"https://n1vk.github.io/%E9%9A%8F%E6%83%B3/placeholder/","excerpt":"不要再摸了！","text":"两年前，我抱着玩玩的心态在 Github 上部署了一个小博客。然而搜肠刮肚发现自己既没技术，又没文笔，无甚可写，遂作罢。近日和舍友闲谈，偶然间舍友提到了博客。突然想起了自己曾经弄的小站。再联想到自己最近需要学习，记忆力又狠狠衰退，于是打算把博客重拾起来。为了避免自己又忘记什么重要的事，我把操作博客的方法都写下来。 写作与更新在部署时我就选择了 Hexo 托管页面。Hexo 是一个 Node.js 包，它能够自动生成网页，用户所需要做的只是写作。并且，它支持各种插件与主题。使用如下代码在 /source/_posts/ 内新建一个文件夹与 markdown 文件，名字为name.md。name也将组成这篇博客的 url 路径： 1hexo new name 设置好以后，可以在本地5000端口部署测试页面： 1hexo g &amp;&amp; hexo s 待测试没问题后，push 到 Github 吧： 1hexo clean &amp;&amp; hexo deploy 等待几分钟就可以看到结果。 配置和优化关于配置，可以在 Volantis 文档内找到所有需要的内容，包括底栏侧栏导航栏配置等等。对于 Post 的封面，我使用 Canvas 可画来制作，按照微信公众号的标题随便做一个即可。对于在文章内插图，我使用 SM.MS 图床。 承诺即使发一些毫无意义的 shitpost，我也尽量不会让博客停下来。拖延和懒惰的一部分来自于追求完美，我可能会希望把事情做的足够好，以至于过分注重细枝末节最后放弃。我不要再这样了，我需要有勇气弄脏双手。","categories":[{"name":"随想","slug":"随想","permalink":"https://n1vk.github.io/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://n1vk.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"记录","slug":"记录","permalink":"https://n1vk.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"博客","slug":"博客","permalink":"https://n1vk.github.io/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"cat"}],"categories":[{"name":"技术","slug":"技术","permalink":"https://n1vk.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"随想","slug":"随想","permalink":"https://n1vk.github.io/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"想法","slug":"想法","permalink":"https://n1vk.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"记录","slug":"记录","permalink":"https://n1vk.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"博客","slug":"博客","permalink":"https://n1vk.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}