{"meta":{"title":"Sheep's Blog","subtitle":"","description":"","author":"Yang","url":"https://n1vk.github.io","root":"/"},"pages":[{"title":"","date":"2022-03-28T12:17:05.975Z","updated":"2022-03-28T12:17:05.975Z","comments":true,"path":"404.html","permalink":"https://n1vk.github.io/404.html","excerpt":"","text":"404 您来到了无人之境 再试试别的吧..."},{"title":"关于本站","date":"2020-10-19T14:58:27.000Z","updated":"2022-03-28T12:01:26.383Z","comments":false,"path":"about/index.html","permalink":"https://n1vk.github.io/about/index.html","excerpt":"","text":"站长邮箱：&#118;&#97;&#x6c;&#x6c;&#104;&#97;&#x6c;&#108;&#x61;&#x40;&#x66;&#x6f;&#x78;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#109; 本站由 Github Pages 托管，使用 Hexo 模版建立，主题是 Volantis。 没有人为本站提供域名服务。 本站素材来自 Flaticon 的 Freepik，推特开源项目 Twemoji，博客模版 Volantis 和我的猫猫。"},{"title":"按分类查看文章","date":"2020-10-20T09:27:11.075Z","updated":"2020-10-20T09:27:11.075Z","comments":false,"path":"categories/index.html","permalink":"https://n1vk.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-03-29T07:59:39.039Z","updated":"2022-03-29T07:59:39.039Z","comments":false,"path":"EasterEgg/index.html","permalink":"https://n1vk.github.io/EasterEgg/index.html","excerpt":"","text":"Easter Egg 恭喜您找到了本站的彩蛋！ 快去跟朋友炫耀一下吧！ 当然也可能是看到了 Repo 的源码..."},{"title":"按标签查看文章","date":"2020-10-20T09:27:33.650Z","updated":"2020-10-20T09:27:33.650Z","comments":false,"path":"tags/index.html","permalink":"https://n1vk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Solidity 语言的形式化规约","slug":"solidity-formal-specification","date":"2022-03-31T14:19:43.000Z","updated":"2022-04-01T13:17:02.986Z","comments":false,"path":"Programming/solidity-formal-specification/","link":"","permalink":"https://n1vk.github.io/Programming/solidity-formal-specification/","excerpt":"Solidity 语言一旦被部署到区块链就无法更改，这要求程序员在设计程序的时候对于变量的改变更加谨慎。形式化规约应运而生，其以注释的方式储存在代码间以供程序员参阅，在必要的时候也可以使用外部程序根据注释进行验证。","text":"智能合约与其他软件一样容易有错误和漏洞。在以太坊环境下，任何错误都伴随着潜在的对金融的破坏性结果。因此引入了形式化规约来验证操作。形式化规约存在相当多的形式，并拥有严谨的数学证明来描述系统行为，从事件所跟踪的具体的区块链上数据的角度来具体说明智能合约的行为。本文将给出两种不同的形式化规约。 基于事件的形式化规约一篇来自BME的论文介绍了基于事件的形式化规约，并给出了名为 SOLC_VERIFY的 验证程序。但是本文章只关心其提出的形式化规约说明。验证程序基于模块化程序验证，由Mike Barnett在其之前的论文中提出，这与计算科学和程序语义等学科相关，不做讨论。 智能合约事件介绍本文介绍的方法主要用于依靠事件 (Event) 传递消息的 Solidity 程序。 Solidity 是面向合约的智能合约编程语言的代表。而事件代表了与用户相关的、有限的交易执行。合约可以利用事件传递链上数据的状态改变情况。技术上来说，事件可以看做有参数的触发器，其存储位置位于区块链的日志。这些日志是合约无法访问的，而用户却可以轻易的监听这些事件从而获得值。以往，事件往往是被认为是一种日志记录机制，与程序设计的正确性无关。然而，既然事件是DAPP中最主要的为用户设计的状态改变提示机制，确保用户正确理解且信任发送的事件是十分关键的。 Solidity 不为发送事件设置任何限制，因此错误的（或恶意的）合约可以发送与状态改变不一致的事件，或对于某些改变忽略发送事件，潜在的将会误导用户。 语法举例请首先看已经加入形式化规约的 Solidity 演示代码： Solidity1234567891011121314151617181920212223242526272829contract Registry &#123; struct Entry &#123; bool set; int data; &#125; // User-defined type mapping(address=&gt;Entry) entries; // State variable /// @notice tracks-changes-in entries /// @notice precondition !entries[at].set /// @notice postcondition entries[at].set &amp;&amp; entries[at].data == value event new_entry(address at, int value); /// @notice tracks-changes-in entries /// @notice precondition entries[at].set &amp;&amp; entries[at].data &lt; value /// @notice postcondition entries[at].set &amp;&amp; entries[at].data == value event updated_entry(address at, int value); /// @notice emits new_entry function add(int value) public &#123; require(!entries[msg.sender].set); entries[msg.sender].set = true; entries[msg.sender].data = value; emit new_entry(msg.sender, value); &#125; /// @notice emits updated_entry function update(int value) public &#123; require(entries[msg.sender].set &amp;&amp; entries[msg.sender].data &lt; value); entries[msg.sender].data = value; emit updated_entry(msg.sender, value); &#125; &#125; 演示代码非常简单，定义了一个 Entry 结构，和一个地址到 Entry 的映射的变量（在文章中叫做状态变量，state variable)；两个事件，一个代表新加入合约，另一个代表更新加入合约。以及添加和更新的函数。 首先，某个事件都跟随的是 entries 变量的变化，因此我们写出： 1&#x2F;&#x2F;&#x2F; @notice tracks-changes-in entries tracks-changes-in 关键字所说明的事实是：事件被触发当且仅当被跟踪的变量改变。由于数据经常以多步过程的形式改变（如例子中，函数依次更新了 Entry 结构中的两个数据），或者数据更新存在某种条件，因此事件不会总是立刻跟在某个追踪变量的改动后。因此，文章提出了前/后检查点的概念。前检查点是由事件所追踪的变量的第一次改变所动态的定义的。相对的，后检查点是一个静态边界，一般是循环或交易的边缘。说白了就是，你的事件必须要在你跟的变量第一次改变之后，离开程序之前进行一次激发。 在跟随变量以外，事件也可以被用 predicates 来注释，它是用状态变量和事件的参数来定义的，并且有两种，preconditions 和 postconditions。前置条件在前检查点前捕捉状态变量的值，而后置条件对应着事件被发送的时刻。 举例来说，对于 new_entry 事件，其要求用户一开始不处于 entries，即set 布尔类型为假，且事件发出后用户属于entries，data 被赋值。 123&#x2F;&#x2F;&#x2F; @notice precondition !entries[at].set&#x2F;&#x2F;&#x2F; @notice postcondition entries[at].set &amp;&amp; entries[at].data &#x3D;&#x3D; value event new_entry(address at, int value); 最后，发射事件的函数必须被标记处发射了何等事件： 1234&#x2F;&#x2F;&#x2F; @notice emits updated_entryfunction update(int value) public &#123;...&#125; 基于函数的形式化规约基于函数的形式化规约和基于事件的有很多相似之处（并且是南大78004870课程所讲述的模式），只是把修改变量的规约放在函数（与合约、循环）前。并且由于函数可以对值进行修改，而非像事件一样仅展现变化，所以会比基于事件的规约增加其他的东西。请看下例： Solidity123456789101112131415161718192021222324/// @notice invariant x == ycontract Track &#123; int x; int y; /// @notice precondition x == y /// @notice postcondition x == (y + n) /// @notice modifies x function add_to_x(int n) internal &#123; x = x + n; require(x &gt;= y); &#125; /// @notice modifies x if n &gt; 0 /// @notice modifies y if n &gt; 0 function add(int n) public &#123; require(n &gt;= 0); add_to_x(n); /// @notice invariant y&lt;=x while(y &lt; x) &#123; y = y + 1; &#125; &#125;&#125; 由例子，我们可以总结出基本的语句： 如果某变量没有被改变，那么需要注明不变式： 1invariant &lt;EXPRESSION&gt; 注意，不变式出现在循环，合约，函数前。 如果函数开始前/结束后必须满足某条件，那么需要注明前置条件/后置条件，与基于事件的一样。 如果函数执行改变了状态变量，那么需要注明修改规约： 1modifies &lt;TARGET&gt; [if &lt;CONDITION&gt;] 进阶的规约表达课程同时给出了一些进阶的规约表达方式，例如： 聚合计算的表达： 1__verifier_sum_&lt;TYPE&gt;( ... ) 所代表了将 &lt;TYPE&gt; 相加所得到的结果。 复合数据类型判等： 1__verifier_eq(..., ...) 其实就是更加复杂的 x == y。 变量旧值引用: 1__verifier_old_&lt;TYPE&gt; 也许是在循环中引用上一次的值或者引用修改前的值。 谓词逻辑表达： 123forall (&lt;VARS&gt;) &lt;QUANTEXPR&gt;exists (&lt;VARS&gt;) &lt;QUANTEXPR&gt; 举例来说： 1forall (uint λ) !(λ &gt;&#x3D; 0 &amp;&amp; λ &lt; length) 总结形式化规约是一种让程序设计更加严谨的实现，而对于对准确度要求高的智能合约来说更加有用。即使没有检查器，掌握形式化合约也有助于形成良好的变量追踪与查询习惯。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"Ethereum","slug":"Ethereum","permalink":"https://n1vk.github.io/tags/Ethereum/"},{"name":"Solidity","slug":"Solidity","permalink":"https://n1vk.github.io/tags/Solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://n1vk.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"}]},{"title":"简单的以太坊智能合约部署","slug":"smart-contract","date":"2022-03-29T02:49:53.000Z","updated":"2022-04-01T13:12:11.339Z","comments":false,"path":"Programming/smart-contract/","link":"","permalink":"https://n1vk.github.io/Programming/smart-contract/","excerpt":"基于 Solidity 合约语言和本地私有链，部署简易的以太坊智能合约的记录。","text":"可以简单的把以太坊虚拟机理解为一个公开使用的后端服务器，用户在其上拥有有限的操作空间，每次操作以交易的形式产生，并会根据修改数据的大小向用户收费，称为 Gas，以此支持服务器维护人员 (即矿工)。并且，服务器上的数据会被永久记录，操作后端数据的代码 (对于EVM，是 Solidity 代码) 也存放在服务器上不能被修改。 矿工可以根据 Gas 和数据操作量选择将哪一笔交易加入区块。因此 Solidity 编程要求存储尽量少的数据，节省空间和操作量，以此得到更快速的响应。 使用 Remix 和 GanacheRemix 是以太坊官方提供的 Solidity 开发环境。在 Remix 内写好代码后可以编译，编译会得到程序的二进制程序接口，称为 ABI。ABI 会提供给 web3.js 来提供操作接口。在编译后可以部署合约，Remix 本身提供了一些 JavaScript 虚拟机来运行智能合约。为了观察到用户和交易的情况，我们可以部署私有链，利用 Ganache。部署后会得到合约地址，你也可以直接在 Remix 和合约交互。 Ganache 可以在本地设置好私有区块链，即开即用。用户可以自行设置端口号，而网络ID为5777而区块链ID为1337。在本地部署好之后，使用 MetaMask 钱包添加私有链。MetaMask 也可以使用其他测试链，虽然其他测试链可以有更多的用户，但在这些链上我们难以观察交易情况。添加私有链后，也记得添加私有链的账户。 说到账户，对于以太坊地址来说，所有链上的地址格式都完全一致。因此，你的任何一个账户都可以在任何链上使用（当然代币不会跟随）。可以尝试把 Ganache 里生成的账户的钱转入一个你主链的地址，操作将会成功且主链地址在私有链上的 ETH 会增加。注意 Ganache 不会追踪除了它生成的账户以外的账户（因为无穷多），但是你仍然可以看到 TX 信息，就在 Ganache 的操作面板。这到底是怎么做到的？得益于钱包地址的随机和海量，生成的两个地址相同的概率几乎是不可能的。 Solidity 代码设计一个 Solidity 代码，对于每个账户存放一个数据，并且允许用户查看数据。 (很遗憾，Hexo 对于 Solidity 代码暂时没有语法高亮，我也不想使用 hightlight.js，所以我随便选用了一种代码高亮模式。) Solidity123456789101112131415161718192021222324252627282930// 声明 License// SPDX-License-Identifier: GPL-3.0// 声明编译器版本pragma solidity &gt;=0.7.0 &lt;0.9.0;// 合约，就像一个类contract numberHolder &#123; // 映射数据结构 mapping(address =&gt; uint16) userNumbers; // 一个事件 event numberSetted(address addr,uint16 num); // 地址的数据的setter函数 function setNumber(uint16 inputNumber) public&#123; userNumbers[msg.sender] = inputNumber; // 发送事件给前端 emit numberSetted(msg.sender, userNumbers[msg.sender]); &#125; // 两个只读函数获得用户地址和数据 function getNumber() public view returns (uint16) &#123; return userNumbers[msg.sender]; &#125; function getAddress() public view returns (address) &#123; return msg.sender; &#125;&#125; 具体内容可以查看 Solidity 的文档。函数发射的事件需要在前端进行监听。关键字 view 代表了这个函数不会操作数据。全局变量 msg 存储了一些当前合约的信息，例如 msg.sender 就是调用合约的地址。 Web 代码Web 端我们使用以太坊 JavaScript API和后端交互，叫做 web3.js，使用此库类似于使用 jQuery 的 ajax。实际上，包括部署合约在内的操作都可以用 web3.js 完成，但本次我们不这样做。 在网页端，首先用简单 HTML 完成界面，给用户提示信息，显示一个可变文本并设置两个按钮： 12345678910111213141516 &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;数字存放&lt;/h1&gt; 在数据框中输入一个数字并点击上传数据，它将会被存储至区块，请注意这会消耗燃料。&lt;br&gt; 点击获得数据将会显示您已经存储的数据，这不会消耗燃料。 &lt;h2 id=&quot;info&quot;&gt;等待输入&lt;/h2&gt; &lt;label for=&quot;data&quot; class=&quot;col-lg-2 control-label&quot;&gt;您的数据&lt;/label&gt; &lt;input id=&quot;data&quot; type=&quot;text&quot;&gt; &lt;button id=&quot;button_update&quot;&gt;上传数据&lt;/button&gt; &lt;button id=&quot;button_download&quot;&gt;获得数据&lt;/button&gt;&lt;/div&gt; 接下来在 &lt;script&gt; 部分设计网页的逻辑。别忘记把 web3.js 和 jQuery 加入到网页中。首先配置好我们的 web3 库： 123456if (typeof web3 !== &#x27;undefined&#x27;) &#123; web3 = new Web3(web3.currentProvider);&#125;else&#123; web3 = new Web3(new Web3.providers.HttpProvider(&quot;http://localhost:8545&quot;));&#125; 这声明了，我们的 web3 是由 HTTP 在本地8545端口提供，也就是我们的 Ganache。接下来： 12345web3.eth.defaultAccount = web3.eth.accounts[0]; var contractABI = web3.eth.contract(/* ABI Here */)var myContract = contractABI.at(&#x27;0x6f0D3623...&#x27;) 第一行代码说明了我们默认交互账户是 Ganache 里的第一个账户。我们现在还不将 MetaMask 链接功能提供在前端。MetaMask 要求前端网页不能是本地打开的，必须运行在一个服务器上 (Python 搭建的简易 HTTP 服务器就可以)，并且需要更复杂且完善的代码。第二行代码需要我们写入之前在 Remix 得到的 ABI，这是我们交互的基础。第三行就是合约本身，从语义上可以理解为：某个 ABI 位于某个确定的地址上。这个地址可以在 Remix 处看到，或在 Ganache 的 TX 信息里找到。 接下来我们来看一下在前端如何调用 Solidity 函数，并用 jQuery 改变前端显示。首先演示一下按钮如何获得数据： 1234567$(&quot;#button_update&quot;).click(function() &#123; myContract.setNumber($(&quot;#data&quot;).val());&#125;);$(&quot;#button_download&quot;).click(function() &#123; $(&quot;#info&quot;).html(&#x27;您的地址：&#x27; + myContract.getAddress.call() + &#x27;&lt;br&gt;&#x27; + &#x27;您存储的数字：&#x27; + myContract.getNumber.call() + &#x27;&lt;br&gt; 操作：读取数字&#x27;)&#125;); 对于 jQuery，简单的语法是利用 $(&quot;#id&quot;) 选中 HTML 对应 ID 的内容，在此是按钮类型。按钮类型具有 click() 方法，我们在内部写出一个函数，意思是“如果按钮被按下，那么执行这个函数，函数的内容是使用合约内的 setNumber() 函数，函数的参数是 HTML 中 ID 为 data 的元素的值”。对于下面获得值的操作，同理。 再来看看怎么监听我们发出的事件： 1234567891011var eventSet = myContract.numberSetted()eventSet.watch(function(error, result)&#123; if(!error) &#123; $(&quot;#info&quot;).html(&#x27;您的地址：&#x27; + result.args.addr + &#x27;&lt;br&gt;&#x27; + &#x27;您存储的数字：&#x27; + result.args.num + &#x27;&lt;br&gt;&#x27; + &#x27;操作：设置数字&#x27;) console.log(result) &#125; else &#123; console.log(error) &#125;&#125;) 基本原理同以上相同，我们将合约的 numberSetted 事件声明成一个变量，对这个变量进行 watch() 方法。里面的函数和刚才的差不多，它具有了两个参数。因为 web3 要求我们进行异常处理，即需要有 if(!error) &#123;&#125; elese &#123;&#125; 的形式。另一个参数 result 里面包含了我们在 Solidity 中写过的两个返回值。如果不太明白，可以在浏览器打开控制台观察一下 log，会完整展现 result 的结构。 网页的样子 总结目前我们的前端已经可以在本地运行了。不过像这样直接链接私有链，利用索引选择调用合约的用户以及函数的处理方式都非常原始，只能作演示用。之后会尽量设计更完善的代码。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"Ethereum","slug":"Ethereum","permalink":"https://n1vk.github.io/tags/Ethereum/"},{"name":"Solidity","slug":"Solidity","permalink":"https://n1vk.github.io/tags/Solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://n1vk.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"}]},{"title":"算法题记录 - 键盘测试","slug":"algorithm-0","date":"2022-03-29T00:00:00.000Z","updated":"2022-03-30T13:56:24.924Z","comments":false,"path":"Note/algorithm-0/","link":"","permalink":"https://n1vk.github.io/Note/algorithm-0/","excerpt":"正向思考不出来的问题，反过来。","text":"羊羊买了新键盘，并邀请大家来试用键盘，但前提是回答出以下问题。 您将获得两个字符串s和t，两者都由小写的英文字母组成。您将逐个字符地键入字符串s，从第一个字符到最后一个字符。 特别之处在于，键入字符时，您可以按Backspace按钮，而不是按与之对应的按钮。Backspace会删除您刚刚键入的最后一个字符（如果您键入的字符串中没有字符，则不执行任何操作）。例如，如果s是”abcbd”，并且您按Backspace而不是键入第一个和第四个字符，您将获得字符串”bd”（第一次按Backspace不删除任何字符，第二次按删除字符”c”）。另一个例子，如果s是”abcaa”，并且您用Backspace键代替最后两个字母，则得到的文本为”a”。 您的任务是确定是否可以通过以上方式，从字符串s获取字符串t. 测试用例第一行是一个整数 q (1≤q≤10^5），代表测试用例的数量。每个测试用例的第一行是字符串s (1≤s的长度≤10^5)，s中的每个字符是小写的英文字母。每个测试用例的第二行是字符串t (1≤t的长度≤10^5)，t中的每个字符是小写的英文字母。 对于每个测试用例，如果可以按本题的方式从s得到t，请打印”YES“,否则，打印“NO”。 Input1234567894abababaabababbaaaaaaaaababaababa Output1234YESNONOYES 初始想法看到题目首先观察了 s 和 t 的联系。首先的想法如下： 对于 s，首先寻找其中所包含的第一个 t[0]。如果没有 t[0]，那么肯定无法输出。 如果有 t[0]，接着去找 t[1]，看看两个字母之间的字母数是不是偶数个（打出，删除，打出，删除…）。如果不是，那么肯定无法输出。 如果还是，那么继续重复以上的步骤，直到 t 越界。 遇到的问题： aababa 和 ababa 无法处理。说明如果 s 存在 t[0]，但完全无效，则应该去除 s 中 t[0] 即其之前的部分，重新进行测试。但是此方法只适用于 t[0]，因为实际上在符合要求的 t[0] 于 s 中出现之前，用户可以什么都不输入只按退格键。并且，这样的方法对于大数据来说太慢了。 本身的算法就非常难设计，需要三个指针，两个位于 s 标定位置，一个位于 t 指向当前的内容。 解决方案反向思考，如果说开头的东西可以忽视会让人难以处理，那么把开头放在最后就好了。同时，我们知道符合要求的字符串 s 的尾部要么和 t 完全一致，要么最后相差偶数个。所以最终的设计是，从 s 和 t 的尾部开始遍历，如果相同就同时前进 1 个字母，再比较；如果不同，则 s 前进2 个字母，再比较。直到 s 或 t 某个字符串结束。最后再判断 t 有没有结束。如果 t 结束了，那么答案就是 YES，此时 s 最开始的部分就是那些我们可以只按退格键的字符。 Python 代码如下： 12345678910111213141516171819202122def special_typing(): stringNum = eval(input()) while(stringNum != 0): stringS = list(input()) stringT = list(input()) comparePointer = len(stringS) - 1 current = len(stringT) - 1 while(current &gt;= 0) and (comparePointer &gt;= 0): if(stringT[current] == stringS[comparePointer]): current -= 1 comparePointer -= 1 else: comparePointer -= 2 if(current &lt; 0): print(&quot;YES&quot;) else: print(&quot;NO&quot;) stringNum -= 1","categories":[{"name":"Note","slug":"Note","permalink":"https://n1vk.github.io/categories/Note/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://n1vk.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://n1vk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"设计模式：基本思想与策略模式","slug":"design-pattern-0","date":"2022-03-28T12:21:57.000Z","updated":"2022-04-01T13:13:18.631Z","comments":false,"path":"Programming/design-pattern-0/","link":"","permalink":"https://n1vk.github.io/Programming/design-pattern-0/","excerpt":"学习 Head First Design Pattern，并试图把书上的废话凝练成我自己的废话。第一部分的内容包括初步认识设计模式，学习基本设计原则以及学习的第一个设计模式：策略模式。","text":"知道继承，接口，多态和虚类不能让你学会面向对象程序设计。理解设计模式，因为设计模式是面向对象开发工程师们多年以来程序设计的经验总结，是为了解决问题而产生的历经验证的工程通用解决方案。良好的设计模式会包含可复用，可扩充，可维护三个特性，而模式可以帮我们做到这点。 首先来举个简单的例子，来展示继承所不能解决的问题。如图，某游戏公司程序员为自己游戏的职业系统设计了一个 Player 超类，所有的职业都会继承这个超类。在继承时，也会继承超类内所有的方法。如果需要新的职业，那么我们就添加一个新的类。完美！ 美丽的UML图 现在公司抛出了新的需求：要求玩家应该会闪避。这很好办，只需要在超类里加入一个 dodge() 方法即可。但是在测试的时候发现了新的问题：牧师会闪避导致了他过于强大的生存能力，以至于不需要队友保护他。这和游戏的设计理念不太符合，公司要求程序员让牧师不再会闪避。这也很简单，把 Priest 的 dodge() 方法的具体实现覆盖成什么都不做就可以了。到目前为止，一切都很好… 直到程序员意识到，公司为了赚钱每个月都会推出一款新职业，他们有的专注攻击不能防御，有的利用防御来攻击，有的……噢还有，公司还会推出氪金装备，使得 Priest 可以有限次的进行闪避动作。天啊，这要怎么办？来看看我们从最初的设计原则可以推出什么。 变与不变应用设计的第一个原则：找出应用中需要变化之处，将其独立，不要和不需要变化的代码写在一起。这样，每次新的需求来到，我们就可以不修改固定的部分，只修改变化的部分。 对于我们的游戏设计来说，我们知道 dodge() 是会随着职业的不同而改变的（当然 attack() 和 defense() 也会变，但是原理是一样的 ）。那么我们把闪避行为拿出来，并为它创建一个类。所有的职业都将 HAS-A 闪避行为。 为谁而写应用设计的第二个原则：针对接口编程，不要针对实现编程。 说真的，我觉得这句话刚一看到非常难理解。 什么是实现？职业类如果实现了 dodge() 接口，那么就意味着所有职业都要实现这个接口，因为他们都继承自原始的超类。我们不要把什么类能实现什么在最开始的时候写死。 怎么针对接口编程？我设计一个 DodgeBehaviour 接口，此接口有 dodge() 方法。现在，我们让具体的类实现这个接口。DodgeNormal 类会正常的躲避，而 DodgeNaught 类什么都不做。现在，闪避行为和 Player 类没有任何关系了。我们可以随意添加闪避行为或者修改行为，比如我们为法师设计一个 DodgeKUXUAN，让闪避的时候会增加粒子效果。 另一个美丽的UML图 完成设计现在事情可能会变得有点奇怪，我们如何让某个职业进行闪避？请看代码： 12345678910public class Player &#123; healthType Health; DodgeBehaviour dodgeBehaviour; //... public void performDodge() &#123; dodgeBehaviour.dodge(); &#125;&#125; 这是我们的超类。看，我们通过让职业 HAS-A 行为的方式成功地托管了闪避行为！这也就引出了我们的第三个设计原则：多用组合，少用继承。HAS-A is better than IS-A! 那么相对应的，子类的代码： 12345public class Priest extends Player &#123; public Priest() &#123; dodgeBehaviour = new DodgeNaught(); &#125;&#125; 在构造函数里面，我们写好 Priest 会使用哪种 实现了 DodgeBahaviour 的类。不仅如此，如果我们对 dodgeBehaviour 设定一个 setter 函数，我们就可以在程序运行时改变牧师躲避的行为，比如牧师装备了氪金道具，那么就将 dodgeBehaviour 设定成可以闪避并计数，结束后改回去。这比写一个 ”可以进行10次闪避” 的 Priest 职业好太多了！ 同理，攻击和防御方法都可以用相同的方式实现。以上的设计模式我们称为策略模式。策略模式定义且封装了独立于使用算法客户的算法族，使他们相互之间能够替换。这也不意味着继承方法真的没用了，比如所有的职业都需要走路，那么 walk() 方法就可以继承。关键点是确立好需求，并选择你需要的设计模式。 （所以，这位程序员该好好跟他的产品经理吵一架 :P ） 总结来看看我们目前学到的东西： 设计原则一：找出应用中需要变化之处，将其独立，不要和不需要变化的代码写在一起。 设计原则二：针对接口编程，不要针对实现编程。 设计原则三：多用组合，少用继承。 策略模式：定义且封装了独立于使用算法客户的算法族，使他们相互之间能够替换。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]},{"title":"重新记录我的博客","slug":"init_post","date":"2022-03-27T15:34:49.000Z","updated":"2022-03-30T13:56:29.799Z","comments":false,"path":"Thoughts/init_post/","link":"","permalink":"https://n1vk.github.io/Thoughts/init_post/","excerpt":"不要再摸了。","text":"两年前，我抱着玩玩的心态在 Github 上部署了一个小博客。然而搜肠刮肚发现自己既没技术，又没文笔，无甚可写，遂作罢。近日和舍友闲谈，偶然间舍友提到了博客。突然想起了自己曾经弄的小站。再联想到自己最近需要学习，记忆力又狠狠衰退，于是打算把博客重拾起来。为了避免自己又忘记什么重要的事，我把操作博客的方法都写下来。 写作与更新在部署时我就选择了 Hexo 托管页面。Hexo 是一个 Node.js 包，它能够自动生成网页，用户所需要做的只是写作。并且，它支持各种插件与主题。使用如下代码在 /source/_posts/ 内新建一个文件夹与 markdown 文件，名字为name.md。name也将组成这篇博客的 url 路径： 1hexo new name 设置好以后，可以在本地5000端口部署测试页面： 1hexo g &amp;&amp; hexo s 待测试没问题后，push 到 Github 吧： 1hexo clean &amp;&amp; hexo deploy 等待几分钟就可以看到结果。 配置和优化关于配置，可以在 Volantis 文档内找到所有需要的内容，包括底栏侧栏导航栏配置等等。对于 Post 的封面，我使用 Canvas 可画来制作，按照微信公众号的标题随便做一个即可。对于在文章内插图，我使用 SM.MS 图床。 承诺即使发一些毫无意义的 shitpost，我也尽量不会让博客停下来。拖延和懒惰的一部分来自于追求完美，会希望把事情做的足够好的想法，会导致人过分注重细枝末节而最后放弃。","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"https://n1vk.github.io/categories/Thoughts/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://n1vk.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"记录","slug":"记录","permalink":"https://n1vk.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"博客","slug":"博客","permalink":"https://n1vk.github.io/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"cat"}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"},{"name":"Note","slug":"Note","permalink":"https://n1vk.github.io/categories/Note/"},{"name":"Thoughts","slug":"Thoughts","permalink":"https://n1vk.github.io/categories/Thoughts/"}],"tags":[{"name":"Ethereum","slug":"Ethereum","permalink":"https://n1vk.github.io/tags/Ethereum/"},{"name":"Solidity","slug":"Solidity","permalink":"https://n1vk.github.io/tags/Solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://n1vk.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"name":"Python","slug":"Python","permalink":"https://n1vk.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://n1vk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"想法","slug":"想法","permalink":"https://n1vk.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"记录","slug":"记录","permalink":"https://n1vk.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"博客","slug":"博客","permalink":"https://n1vk.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}