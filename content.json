{"meta":{"title":"Sheep's Blog","subtitle":"","description":"","author":"Yang","url":"https://n1vk.github.io","root":"/"},"pages":[{"title":"","date":"2022-03-28T12:17:05.975Z","updated":"2022-03-28T12:17:05.975Z","comments":true,"path":"404.html","permalink":"https://n1vk.github.io/404.html","excerpt":"","text":"404 您来到了无人之境 再试试别的吧..."},{"title":"","date":"2022-04-27T05:44:21.233Z","updated":"2022-04-27T05:44:21.233Z","comments":true,"path":"googlea872b2bca8f19498.html","permalink":"https://n1vk.github.io/googlea872b2bca8f19498.html","excerpt":"","text":"google-site-verification: googlea872b2bca8f19498.html"},{"title":"","date":"2022-03-29T07:59:39.039Z","updated":"2022-03-29T07:59:39.039Z","comments":false,"path":"EasterEgg/index.html","permalink":"https://n1vk.github.io/EasterEgg/index.html","excerpt":"","text":"Easter Egg 恭喜您找到了本站的彩蛋！ 快去跟朋友炫耀一下吧！ 当然也可能是看到了 Repo 的源码..."},{"title":"关于本站","date":"2020-10-19T14:58:27.000Z","updated":"2022-04-05T02:13:31.221Z","comments":true,"path":"about/index.html","permalink":"https://n1vk.github.io/about/index.html","excerpt":"","text":"站长邮箱：&#118;&#97;&#x6c;&#x6c;&#x68;&#x61;&#x6c;&#x6c;&#x61;&#64;&#102;&#111;&#120;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d; 本站由 Github Pages 托管，使用 Hexo 模版建立，主题是 Volantis。 没有人为本站提供域名服务。 本站素材来自 Flaticon 的 Freepik，推特开源项目 Twemoji，博客模版 Volantis 和我的猫猫。"},{"title":"按标签查看文章","date":"2020-10-20T09:27:33.650Z","updated":"2020-10-20T09:27:33.650Z","comments":false,"path":"tags/index.html","permalink":"https://n1vk.github.io/tags/index.html","excerpt":"","text":""},{"title":"按分类查看文章","date":"2020-10-20T09:27:11.075Z","updated":"2020-10-20T09:27:11.075Z","comments":false,"path":"categories/index.html","permalink":"https://n1vk.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"子网还是专用网？我混淆了分类网和网络地址转换","slug":"subnets-and-nat","date":"2022-05-25T13:05:25.000Z","updated":"2022-05-25T15:54:10.174Z","comments":true,"path":"Note/subnets-and-nat/","link":"","permalink":"https://n1vk.github.io/Note/subnets-and-nat/","excerpt":"打开我自己购买的路由器，连接我的设备。我所在的这个网络应该叫子网，还是私网（专用网）？如果已经有子网掩码来为网络分类，我们为什么还需要网络类型转换（NAT）？一番调查之后，我想梳理清楚这个小问题。","text":"在最初学习计算机网络的时候，我首先学习了IPv4编址方式，紧接着学习了子网，CIDR，路由聚合，IP地址获取与NAT。但在思考和与朋友讨论的过程中，我发现我混淆了一些概念。因此我做了一些调查，在这篇笔记中按顺序梳理这几个概念，这个顺序也是互联网IP协议发展所采取的顺序。 路由器和网关首先我们明确，这些设备全部都是用来调控网络流量的。那么，简单一点来说： 路由器在相同的网络中转发数据。路由器本身将会存储一个查找表。对于接受的数据包，路由器检查数据包内的数据是发给谁的，根据自己的查找表传递给下一台路由器/主机。网络中的数据包就是这样，经过多次跳跃，从一个主机到达另一个主机的。 网关在不同的网络中传递数据。如果两个网络使用了不同的网络协议，那么我们就需要网关为我们做协议转换。最常见的就是我们接下来要讲的NAT。 路由器和网关是可以重叠的。一个设备，可以既做数据包在同协议网络间的转发，又为网络间通信转换网络协议，此时他就是一个路由器和一个网关。 除此之外，还有一些互联网设备的概念，诸如交换机，接入点（AP），调制解调器（MODEM）等，因为对于理解本篇文章不重要，就不展开讲了。 子网与子网掩码教科书上说，网络被分配到的一个IP地址由网络地址和子网掩码组成。IP地址由四段八比特二进制数组成，也可以写成点分的十进位形式。而子网掩码，其高比特位标志了该子网的地址，而低比特位标志了主机在子网中的地址。IP地址后用一个斜杠加一个数字，表示其前多少位是网络地址。我们举个例子。 IP地址12345十进制网络地址 192.168.1.100/24二进制网络地址 11000000 10101000 00000001 01100100十进制子网掩码 255.255.255.0二进制子网掩码 11111111 11111111 11111111 00000000 IPv4协议是在1982年提出的，最开始的32位IPv4只用前8位确定网络地址，即主机连接到哪个网络，以及剩下的部分作为主机地址。这样的分类方式不能允许太多的独立网络。 为什么需要区分一个网络地址和一个主机地址？我的理解是，这实际上是为了控制网络的边界，方便管理与路由器寻址。假设不区分子网，那么路由器需要维护的查找表将会非常庞大，需要将IP地址的每一位都记录下来，并且计算保存最近距离的路由器。如果区分了子网，那么路由器只需要存储以哪些字段开头的数据发给某个路由器即可。 而伴随其提出的是如何为子网划分地址的模式。最开始，人们选择了比较简单的分级式寻址。网络被分为ABCDE五个类，不同的类使用他们的前三位来识别： A类地址，第一位是0，使用前8位作为网络位，剩下的作为主机位，A类地址可以构建出 128 个网络，每个网络容纳 16,777,214 个主机。 B类地址，前两位是10，使用前16位作为网络位，剩下的作为主机位，B类地址可以构建出 16,384 个网络，每个网络容纳 65,534 个主机。 C类地址，前三位是110，使用前24位作为网络位，剩下的作为主机位，B类地址可以构建出 2,097,152 个网络，每个网络容纳 254 个主机。 D类群播地址，前四位是1110；和E类保留地址，前四位是1111。 实际上，这种分类模式就没有必要说明子网掩码，因为你总是可以从前n位推断出其子网掩码应该是多少。这种分类模式现在已经被废止，因为其立刻展现出了问题：对于一个小型网，C类地址的主机容量太小，B类地址又太大。 无类别区域间路由（CIDR）和路由聚合为了解决刚刚提到的问题，我们使用CIDR。原理很简单，我们将IP地址重新设定为 a.b.c.d/x，x代表了IP地址的网络号，可以为任意值。这样我们就可以在灵活分配子网大小的同时，简化我们路由保存的转发表。 在实践中，我们就得到了路由聚合的概念。我们的路由器只需要保存开头x位的某个IP地址应当转发给哪个子网，而不需要关心子网内数据包是如何传递的。可能在子网内存在其他子网，但是发包的路由器并不关心。这种情况我们就称作路由聚合。 顺便一提，某些IP地址是协议规定的保留地址。比如127.0.0.1 (01111111 00000000 00000000 00000001) 是环回地址，也就是当前所在的主机，也叫做 localhost，实际上环回地址有 1,600,000 以上个，从127.0.0.1到127.255.255.255均为环回地址。 255.255.255.255是广播地址，向广播地址交付报文会让该报文被发送到该子网内的每个主机。当然，这是路由器的转发表保存的数据决定的，路由器在收到目的地是255.255.255.255地址的数据包之后，它会向它子网内的所有主机发该数据包。 IP地址获取我们已经做好了如何给IP地址分类，接下来简单讲一下IP地址是如何获取的。最简单的是由你的互联网服务提供商（ISP）提供，ISP自己有一个地址段，而后他可以将地址段划分为子网并交付给用户。如下例子（尖括号的部分是主机号，而中括号的部分是子组织相较于ISP地址增加的网络号）： ISP分配1234567ISP得到的地址 200.23.16.0/20 11001000 00010111 0001&lt;0000 00000000&gt;组织A 200.23.16.0/23 11001000 00010111 0001[000]&lt;0 00000000&gt;组织B 200.23.18.0/23 11001000 00010111 0001[001]&lt;0 00000000&gt;...组织G 200.23.30.0/23 11001000 00010111 0001[111]&lt;0 00000000&gt; 那么ISP的地址从哪儿来？答案是因特网名字和编号分配机构（ICANN）。ICANN是非营利组织，其不仅分配IP地址，也管理DNS根服务器，分配域名。 当然，还有一种方法，通常用于比较小的子网，就是动态主机配置协议（DHCP）。主机每次连接到配置了DHCP的网络，都会获得一个临时的IP地址。除此之外，主机还可以得到当前子网的子网掩码，第一跳路由地址（我们现在一般叫做默认网关），本地DNS服务器地址。现在打开你的手机，进入网络设置并查看连接的无线局域网信息，你就可以看到这些内容。连接学校的局域网，学校也会提前告知你要使用DHCP。 网络地址转换（NAT）需要意识到的是，以上我们所有的工作都不过是在给我们的 4,294,967,296 个IP地址做分类，这也是我错误思想的来源。 子网并不代表整个网络中的某两台主机可以分配相同的IP地址。想象一个身份证号或者手机号，其内容是不能重复的，对其不同段做分类只是为了方便罢了。即使是划分了子网，不同子网间的IP地址也必须是不同的。这实际上很好理解，如果他们相同，那路由算法将会被破坏。路由器不知道应该向谁发包，或者总有一个主机收不到包，因为路由表在较短的网络号处截断并转发（想象路由器发送所有212.144.*.*到路由器A，路由器A是212.144.1.1/12，而路由器B是212.144.1.1/16）。 为了解决IP枯竭问题，人们从1993年开始使用了NAT技术，并通过RFC 1918协议定义了一部分IP地址使其专门用于NAT网络内部地址分配。这样的网络叫做专用网或者私有网。以下是RFC 1918规定的IP块： RFC 19181234规定区块名 IP地址区块 IP数量 24位区块 10.0.0.0 – 10.255.255.255 16,777,216 20位区块 172.16.0.0 – 172.31.255.255 1,048,576 16位区块 192.168.0.0 – 192.168.255.255 65,536 专用网通过网关来完成地址转换。我们现在自己使用的，提供无线局域网连接服务的路由器都做了NAT地址转换，因此提供WiFi的路由器也就是该私有网的网关。拿我自己的路由器为例，在私有网，其IP地址是192.168.1.1，访问该地址也会进入路由器的管理界面。我的所有设备的网关都是192.168.1.1，每个设备通过DHCP获得自己在私有网络的地址，将数据包交给网关做转发。而查看路由器自己的设置，可以看到路由器在外部网络的地址是172.26.55.113，也是通过DHCP获得IP地址。根据RFC 1918，这个地址仍然是一个私有地址。实际上，这是大学校园私有网络的地址。并且，路由器的网关是172.26.0.1，这就是大学校园私有网络的流量出口。在此处，校园网私网地址被翻译成更高一级的公网地址进行通信。 私有网络必须要有不同于公网的IP，因为如果出现了公网IP，那么当一个主机要发给此IP时，网关的路由就不确定这个数据包到底是要给私网内的主机，还是转发出去。 那么，通信是如何完成的？以网络地址端口转换（NAPT）为例，假设现在的网络是我的路由器创建的私有网，从我的手机(192.168.1.101)发送的数据，到达网关(192.168.1.1)后，网关会将其转为(172.26.55.113:Port)，再发往下一级路由。这样一层一层包裹，数据包能够最终到达公网。同样的，接收的数据会被网关根据端口号一层一层地解开，到学校局域网的一层时，学校网关(172.26.0.1)将会收到一个发往172.26.55.113:Port的包，那么学校网关将会把包路由到172.26.55.113，我的路由器则会根据Port将数据包路由回我的手机。 当然，如果私网内的某个IP用了两个端口，那么网关也会为其映射两个到外部的端口，以便进行通信。 NAT的好处在于，私网内的用户非常安全。如果不主动发送信息，那么公网将无法与其进行通信。而坏处是，NAT下的主机实际上没有真正的IP地址，不能参与某些网络协议，比如某些必须从外部建立的UDP协议。举例来说，任天堂说我的NAT类型是D不让我玩联机游戏。 结论子网和私网不是一个概念。不过，路由器创建的网络仍然可以被称作一个子网，只不过这个子网并不属于一个大的互联网。如果要谈论获取公网IP，实际上我们谈论的是一个跳出NAT的过程。比较常用的是端口映射，也就是说我将私网内的IP固定映射到网关的公网地址的某个端口上去，这样其他用户就可以通过访问网关公网IP:Port来进行通信。当然，这样的方法似乎只能跳出一层NAT。","categories":[{"name":"Note","slug":"Note","permalink":"https://n1vk.github.io/categories/Note/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://n1vk.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"author":"cat"},{"title":"构造玩具版 Java 虚拟机 Lab1 - 软件工程课程作业 (待更新)","slug":"vjvm-lab1","date":"2022-05-10T06:02:27.000Z","updated":"2022-05-25T13:04:53.981Z","comments":true,"path":"Programming/vjvm-lab1/","link":"","permalink":"https://n1vk.github.io/Programming/vjvm-lab1/","excerpt":"本文章系列介绍软件工程与计算一(SEC-I)课程大作业，其最终目标是实现一个可以运行Java程序的JVM。在第一个Lab中，我们将会阅读框架代码，了解Java字节码并将数据读入我们的程序。","text":"Java 代码以类为基础。在编译时，每个类都会生成一个.class文件，其中用16进制字节码保存了JVM运行程序需要的各种信息。虚拟机读取信息，就可以执行程序。根据这个原理，我们可以用 Java 写一个 Java 虚拟机，这真是太有趣了（棒读）。 本程序使用 OpenJDK 1.8，使用 Gradle 构建并使用了 lombok 插件。如果使用IDEA，请在手动在项目设置里修改为 OpenJDK 1.8；提到的 lombok 插件非常便利，在自己编写程序时也有多次用到，比如最简单的应用是可以在抛出异常的地方写一个 @SneakyThrow，这样程序员就不用麻烦的为一个自己无法处理的异常写一个 try-catch 包裹了。 Java 字节码在一切开始之前，我们需要先了解 Java 字节码的结构。你可以用任何16进制编辑器查看.class文件，或者你可以使用javap $&#123;target&#125; -verbose来用人类可以读懂的方式查看其内容。下图展示了.class文件顺序排列的结构。一个固定长度的小块块代表了一个 Byte。 字节码结构示意图 魔数和版本号最开始的魔数 0xCAFEBABE，或者 3405691582 (int)，标志着这是一个 Java 虚拟机可运行的字节码文件，真是独特（Cafe Babe = 看板娘？）。接下来两个 short 存储了编译的副、主版本号。JVM在执行的时候也会检查自己能否运行该版本号的字节码。 常量池首先，常量池计数器占用一个 short。它记录了 cp_info 即常量池项的个数，注意到常量池计数器是从1开始的，所以常量池项将会有constant_pool_count - 1个，因为偶尔会需要有一个引用“不指向任何常量”，即索引0。又注意到计数器因为是16比特存储，因此常量个数不能超过65534个（如果你在一个类里面写了这么多常量，那你应该思考一下设计模式）。 随其后的是不定长度的常量池数据区。如果它不定长度，那么我们如何读取呢？请打开我们的手册并翻到4.4节常量池（在78页）。我们可以看到，每个 cp_info 的结构是： cp_info1234cp_info &#123; u1 tag; u1 info[];&#125; 根据一个字节的类型标记，我们可以info[]到底是什么。比如，一个CONSTANT_Utf8_info结构，即字面常量结构在4.4.7被介绍，其结构如下： CONSTANT_Utf8_info12345CONSTANT_Utf8_info &#123; u1 tag; u2 length; u1 bytes[length];&#125; 根据这个原理，我们每次首先判断其是什么类型，再按照类型读取数据。建议随便写一个程序，然后利用javap观察一下，看看它存放了什么字面数据，别的数据又是如何被存放的。 访问标志访问标志就是你在程序里写的public, private, final, abstract等等。其具有两个字节，并且其是一个掩码结构。我们暂且不需要知道所有的访问标志都是什么，只需要知道计算这块区域的方式是将所有的访问标志求和即可，举例来说，假如有一个公开接口，其具有的访问标志有PUBLIC的值是0x0001，INTERFACE的值是0x0200，那么访问标志就是0x0201。 类索引与父类索引这里的类索引和父类索引都分别占有两个字节，存储一个指向常量池中CONSTANT_Class_info的索引。 接口首先具有接口数量信息，接着有该数量个接口数据信息。注意接口数据信息只是一个两字节的，指向常量池中CONSTANT_Class_info的索引。 字段与方法字段和方法相当类似，其开头都会有一个计数器，而后跟随一串数据，这些数据拥有这样的结构： field_info1234567field_info &#123; u2 access_flags; u2 name_index; u2 descriptor_index; u2 attributes_count; attribute info attributes[attributes_count];&#125; method_info也是一模一样的。我们可以看到一个字段或方法拥有访问标志，具有其名字和描述符索引，属性计数器等。 属性我们暂时不需要关心属性(attribute)的部分，但是我还是把其结构表示出来： attribute_info12345attribute_info &#123; u2 attribute_name_index; u4 attribute_length; u1 info[attribute_length];&#125; 在写代码的时候会用到。 程序框架在 VJVM 项目的src目录中存放了所有的程序源代码，我们可以先观察一下其结构。不需要关心的部分被我去掉了。 Source File Tree123456789101112131415161718192021222324252627282930src├── main│ └── java│ └── vjvm│ ├── classfiledefs│ │ ├── ...│ ├── classloader│ │ ├── JClassLoader.java│ │ └── searchpath│ │ ├── ClassSearchPath.java│ │ └── ModuleSearchPath.java│ ├── runtime│ │ ├── JClass.java│ │ └── classdata│ │ ├── ConstantPool.java│ │ ├── FieldInfo.java│ │ ├── MethodInfo.java│ │ ├── attribute│ │ │ ├── ...│ │ └── constant│ │ ├── ClassConstant.java│ │ ├── ...│ │ └── UnknownConstant.java│ ├── utils│ │ └── UnimplementedError.java│ └── vm│ ├── Main.java│ └── VMContext.java└── test └── ... 我们首先从目录main/java/vjvm/vm看起。这里有程序的入口，我们可以暂不关心。构造 VJVM 的程序员使用了 lombok 来简化程序的使用，我们可以理解为编译好程序运行后为其提供一些参数，由程序入口来处理。接下来 VMContext 就是接收查找目录并生成类加载器实例。 所以，我们来看main/java/vjvm/classloader，即类加载器。我们可以看到该目录下还有一个searchpath，我们合理的推测其是类加载器的成员。因为我们可能到运行时才知道我们需要从何处，比如文件内或是jar包内，或者是其他情况。因此需要动态绑定，面向接口编程。 JClassLoader 在对应路径加载到编译好的类文件后，其用得到的文件，根据代码实际内容来看是 DataInputStream 类型，即二进制数据流，和其本身创建一个 JClass。这带领我们来到main/java/vjvm/classdata目录。在这里我们需要实现读取一个类的内容。根据之前字节码的介绍，比较棘手的是常量池，字段方法属性信息等等。 其他有省略号的文件均不是本次 Lab 需要考虑的内容。 构造查找类文件的代码如果我们想要读取.class文件内容，首先该找到.class文件在哪里。我们首先来阅读一下框架给出的JClassLoader。 JClassLoader.java1234567891011121314151617181920public class JClassLoader implements Closeable &#123; private final JClassLoader parent; private final ClassSearchPath[] searchPaths; private final HashMap&lt;String, JClass&gt; definedClass = new HashMap&lt;&gt;(); // Stores its creator private final VMContext context; // constructor // ... public JClass loadClass(String descriptor) &#123; //... &#125; @Override @SneakyThrows public void close() &#123; // ... &#125; 首先看属性，它具有一个同类型的parent，一个搜索路径列表和一个描述符对应JClass的的哈希表。 待更新。 构造读取字节码内容的代码待更新。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"Java Virtual Machine","slug":"Java-Virtual-Machine","permalink":"https://n1vk.github.io/tags/Java-Virtual-Machine/"}]},{"title":"设计模式：观察者模式与装饰者模式","slug":"design-pattern-1","date":"2022-04-15T09:18:03.000Z","updated":"2022-04-23T16:06:19.665Z","comments":true,"path":"Programming/design-pattern-1/","link":"","permalink":"https://n1vk.github.io/Programming/design-pattern-1/","excerpt":"学习 Head First Design Pattern 的第二部分的内容包括观察者(Observer)模式和装饰者(Decorator)模式。","text":"通过自己举出的一些设计例子，配合代码，学习观察者模式和装饰者模式。这篇文章包含了两个不相关的内容，分别对应书上两个不同的章节。 观察者模式假设目前我们有一位教务处老师，这位老师希望同学们帮他制作一个电子公告栏。亲切的教务处老师送给我们一段源码。 ManagementSys类123456789101112public class ManagementSys &#123; private String courseName; private String courseSchedule; // ... public String getCourseName(); public String getCourseSchedule(); // ... public void setInfo(); public void infoChanged();&#125; 教务处老师给出了获得课程信息，课程时间，授课老师等等一系列的getter方法。而且，每次老师获得新信息之后，都会调用一个infoChanged()方法。我们不需要在意getter的具体实现，只需要根据信息写电子版程序即可。我们很容易得到思路，首先，我定义一个可以显示内容的公告栏类，比如说开课栏目公告栏、开课时间公告栏等等，再为公告栏类增加update()方法来更新内容，因此… infoChanged()方法实现12345678910public void infoChanged() &#123; String courseName = getCourseName(); String courseSchedule = getCourseSchedule(); // ... courseAvailableDisplay.update(courseName, ...); courseScheduleDisplay.update(courseSchedule, ...); // ...&#125; 这应该是大部分人直觉中的方法，至少是我的。但是，这违反了我们曾经学习的设计原则。首先，我们没有封装变化的部分，大家的update()至少在形式上是一致的，应该被封装起来；其次，我们现在面向实现编程，也就是说，我们把infoChanged()将会更新哪些公告板写死在代码中。如果我们未来想要添加新的展板，我们不得不也修改这里的代码，并且我们将无法做到在运行时动态的改变是否更新某个告示板。不太好！ 于是，我自己提出了一个解决方案，我打算让这些公告栏都继承自主公告栏类，这样它们就拥有相同的update()方法，当然我也可以用继承加多态的方式直接遍历所有Display对象，就如同下面这样： ManagementSys类内部12345678910111213//...public ArrayList DisplayList;public ManagementSys() &#123; DisplayList = new ArrayList();&#125;public void infoChanged() &#123; for(int i = 0; i &lt; DisplayList.size(); ++i)&#123; DisplayList.get(i).update(foo, bar, ...); &#125;&#125;//... 将对象添加到数组的过程就相当于同意接受更新，也可以动态去除。我们来看看我们提出的土方法和观察者模式之间有何异同。 定义观察者模式定义了对象之间的一对多依赖，这样一来当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。观察者模式将会设计一个主题(Subject)接口，其方法有添加观察者、去除观察者和通知观察者；以及一个观察者(Observer)接口，拥有更新的方法。具体的主题总是会实现主题接口，而具体的观察者将会实现观察者接口。 观察者模式提供的设计允许主题和观察者之间松耦合。这是什么意思？松耦合意味着两个对象之间可以交互，但是彼此并不明白各自的细节。主题只知道有某个类实现了观察者接口，但对于这个类是什么，将会做什么，主题不知道也不关心。如果我需要在其他地方使用主题或者观察者，那么可以轻易复用。这就带来了我们的第四个设计原则：为了交互对象之间的松耦合设计而努力。 重新设计根据我们已有的信息，我们来重新设计一下我们的系统，首先当然实现我们的主题-观察者接口。 观察者接口123456789public interface Subject &#123; public void registerObserver(Observer o); // 注册 public void removeObserver(Observer o); // 移除 public void notifyObservers(); // 通知，当主题有东西改变&#125;public interface Observer &#123; public void update(argu, ...) //&#125; 有了接口之后，我们可以让ManagementSys实现接口… ManagementSys类1234567891011121314151617181920212223242526272829303132333435public class ManagementSys implements Subject &#123; private ArrayList observers; // ... public ManagementSys() &#123; observers = new ArrayList(); &#125; public void registerObserver(Observer o) &#123; observers.add(o); &#125; public void removeObserver(Observer o) &#123; int i = observers.indexOf(o); if(i &gt;= 0)&#123; observers.remove(i); &#125; &#125; public void notifyObservers() &#123; for(int i = 0; i &lt; observers.size(); ++i)&#123; Observer observer = (Observer)observers.get(i); observer.update(foo, bar, ...); &#125; &#125; public void setInfo() &#123; // this.XX = XX; infoChanged(); &#125; public void infoChanged() &#123; notifyObservers(); &#125;&#125; 不得不说，我们的土方法可以算是和观察者模式非常接近了，但是我们并没有把观察者和主题抽象成接口，也没有把存储观察者的ArrayList封装起来。对于单个项目来说，我想我们已经做的足够好了。不过，如果要讨论到可复用性，还是书上提出的方法更加完善。任何类只要实现了写好的接口就可以达到效果。这样，我们也可以针对性地修改我们的告示牌，只需要实现Observer接口，并在update()方法中选择自己需要的参数进行更新就可以了。 内置的观察者模式Java API中有内置的观察者模式。java.util中包含基本的Observable类和Observer接口。与我们自己实现的观察者模式不同的是，它支持使用“推”和“拉”两种方式传递数据，同时在做之前需要调用setChanged()方法告知程序已经改变。但是，Java提供的“主题”是一个类，意味着你没有办法进行多继承，而且Observable具有Protected方法，这也会阻止你将Observable实例组合到你自己的类中。简直是我们之前所学的设计原则的灾难啊！ 除了java.util.Observable，在其他各种地方也有类似的观察者模式的设计，比如Swing API中的JButton，其超类AbstractButton具有AddListener()的方法，允许你做到：当按钮被按下时，传递消息到所有的ActionListener中。ActionListener接口则有actionPerformed()方法，相当于本例子中的update()。这些会令人想到在 jQuery，MATLAB App Designer 等工具中编写回调函数。许多GUI框架大量使用了这种模式。 思考上文提到的jQuery令我想起了一些事情。想象一下，notifyObservers()方法在循环中对所有观察者调用update()方法时，有一个观察者出现了问题，比如：过长甚至是死循环，抛出异常等等。这样将会打断notifyObservers()方法的整个过程。真不好！所以如果可以，我们应该用异步的办法解决这类问题。当然，成熟的GUI框架也都是如此做的。 装饰者模式还记得上次的游戏公司吗？现在有新的工作了：你需要设计游戏里在NPC处售卖的武器。现在游戏里已经有一个原始的武器实现了。目前为止，每个武器都会有名字和返回价格的方法，其他的部分我们暂时不关心。 Weapon超类及其子类12345678910111213141516171819202122232425// Weapon.javapublic abstract class Weapon &#123; String name; //... public double cost(); public String getName();&#125;// Sword.javapublic class Sword extends Weapon &#123; //... public Sword() &#123; name = &quot;Sword&quot;; &#125; public double cost() &#123; return 20; &#125;&#125;// Axe.java// Bow.java// Spear.java// Wand.java 即所有的武器都继承自一个超类，各自实现自己的cost()方法。但是现在问题来了，如果只有这些单一的武器多没有意思啊，不会有人喜欢玩我们的游戏的。项目经理告诉你，我们打算做一个： [ 稀有的 火焰附加 恶灵退治 吸血 长剑 +3 ] …怎么办？可不要说我们要实现下面的这个类： Can't believe I actually typed these1234567public class RareFlameAspectUndeadSlayerVampireLongSwordPlusThree extends Weapon &#123; // 我不想写他的构造函数了，但是你懂会出现什么的 public double cost() &#123; return 173,423.02; &#125;&#125; 很明显，原始的武器实现严重违反了我们的设计原则：独立变化之处，少用继承。当然你可能想到了另一种思路，毕竟上面的那把炫酷剑，到头来说也是剑嘛。我们可以让剑HAS-A炫酷属性，不就解决问题了吗？ 尝试重设计 Weapon 类1234567public abstract class Weapon &#123; //... public void hasFlameAspect(); public void hasVampire(); //...&#125; 这是书上给出的方案，但我觉得不够好，或者说完全不好，我甚至想不到如何计算价格，难道要遍历这些方法？书上的例子是否有些为了否定而否定呢？HAS-A并不是无法解决这个问题。我想到，此时我们也许应该用到我们之前学习的策略模式，将炫酷属性封装起来，成为一个接口，具体的炫酷属性将会实现这个接口，并且再用一个ArrayList存储它们，现在我们就将变化之处独立出来了。如果游戏多了新的炫酷效果，那么我们只需要实现炫酷效果本身即可。 策略模式的 Weapon 类设计1234567891011121314151617181920212223242526272829303132333435363738394041// Weapon.javapublic abstract class Weapon &#123; //... ArrayList allAbilities; //...&#125;// Sword.javapublic class Sword extends Weapon &#123; //... public Sword() &#123; allAbilities = new ArrayList&lt;WeaponAbility&gt;(); this.name = &quot;Sword&quot;; this.cost = 20; &#125; // ... public void addAbility(WeaponAbility a) &#123; // 加入数组 // 更新价格和名字 &#125;&#125;interface WeaponAbility &#123; public double cost; public String name; // 可能会实现属性的能力&#125;class FlameAspect implements WeaponAbility &#123; public FlameAspect() &#123; this.cost = 109.3; this.name = &quot;Flame Aspect&quot;; &#125; // ...&#125; 看来其他的设计模式并不是不可行，我们也做到了使用组合不使用继承。但是毕竟我们这一节是讲装饰者模式嘛！装饰者模式究竟比我们以上的代码优越在何处？这需要我们理解我们的第五个设计原则：类应该对扩展开放，对修改关闭。可以用任何想要的行为扩展类，但是尽量不要修改类的代码。可能现在代码已经被写好，如果这个时候去修改Weapon类的属性，构造函数等等，就会出一些问题。装饰者模式严格遵守了开放-关闭原则，让我们看看这是怎么做到的。 定义装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。装饰者超类本身将会继承现有的超类。也就是说，在本例子中，装饰者超类和Sword类是同级别的。同时，装饰者的具体实现是继承了装饰者超类的。 等一下？不是不要使用继承要用组合吗？但其实，本处继承的重点是，要求装饰者和被装饰者必须是一样的类型。我们所做的事情是“类型匹配”，而非获得任何行为。当我们把装饰者和组件结合时，才是加入了新的行为。获得行为的方式是组合而来的。 重新设计我们现在可以重新设计我们的武器属性了，首先，Weapon类不需要做任何变化，我们之前写好的Sword类也不需要变化，来看看装饰者的超类如何实现。 WeaponDecorator 类实现123public abstract class WeaponDecorator extends Weapon &#123; public abstract String getName();&#125; 先别急着疑惑，我们再具体实现一个装饰者，这样就能具体看到它的作用了。 Vampire 类实现123456789101112131415public class Vampire extends WeaponDecorator &#123; Weapon weapon; public Vampire(Weapon weapon) &#123; this.weapon = weapon; &#125; public String getName() &#123; return &quot;Vampire &quot; + weapon.getName(); &#125; public double cost() &#123; return 200.3 + weapon.cost(); &#125;&#125; 也就是说，装饰者超类必须实现其父类需要改变的方法，而具体的装饰者将会override这些方法，并进行具体的改动。这样的行为可以让我们得到神奇的效果（我已经在兴奋了）： 1Weapon sellWeapon = new Vampire(new UndeadSlayer(new FlameAspect(new Rare(new Sword())))); 真是美丽又可怕！这立刻让我们想到了别的东西。 真实世界的装饰者装饰者竟在我身边，想想你曾经要做文件流读写的时候写过的代码： 1InputStreamReader iptStrm = new InputStreamReader(new FIleInputStream(arg)); 这样看来，装饰者模式的缺点也非常明显了，因为这样嵌套的小类实在是太多了（比如我的一位朋友对于Java的印象就是：有很多new）。 总结来看看我们新学到的东西： 设计原则四：为了交互对象之间的松耦合设计而努力。 设计原则五：类要对扩展开放，对修改关闭。 观察者模式：定义对象之间的一对多依赖，这样一来当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 装饰者模式：动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]},{"title":"Solidity 语言的形式化规约","slug":"solidity-formal-specification","date":"2022-03-31T14:19:43.000Z","updated":"2022-04-04T16:04:24.936Z","comments":true,"path":"Programming/solidity-formal-specification/","link":"","permalink":"https://n1vk.github.io/Programming/solidity-formal-specification/","excerpt":"Solidity 语言一旦被部署到区块链就无法更改，这要求程序员在设计程序的时候对于变量的改变更加谨慎。形式化规约应运而生，其以注释的方式储存在代码间以供程序员参阅，在必要的时候也可以使用外部程序根据注释进行验证。","text":"智能合约与其他软件一样容易有错误和漏洞。在以太坊环境下，任何错误都伴随着潜在的对金融的破坏性结果。因此引入了形式化规约来验证操作。形式化规约存在相当多的形式，并拥有严谨的数学证明来描述系统行为，从事件所跟踪的具体的区块链上数据的角度来具体说明智能合约的行为。本文将给出两种不同的形式化规约。 基于事件的形式化规约一篇来自BME的论文介绍了基于事件的形式化规约，并给出了名为 SOLC_VERIFY的 验证程序。但是本文章只关心其提出的形式化规约说明。验证程序基于模块化程序验证，由Mike Barnett在其之前的论文中提出，这与计算科学和程序语义等学科相关，不做讨论。 智能合约事件介绍本文介绍的方法主要用于依靠事件 (Event) 传递消息的 Solidity 程序。 Solidity 是面向合约的智能合约编程语言的代表。而事件代表了与用户相关的、有限的交易执行。合约可以利用事件传递链上数据的状态改变情况。技术上来说，事件可以看做有参数的触发器，其存储位置位于区块链的日志。这些日志是合约无法访问的，而用户却可以轻易的监听这些事件从而获得值。以往，事件往往是被认为是一种日志记录机制，与程序设计的正确性无关。然而，既然事件是DAPP中最主要的为用户设计的状态改变提示机制，确保用户正确理解且信任发送的事件是十分关键的。 Solidity 不为发送事件设置任何限制，因此错误的（或恶意的）合约可以发送与状态改变不一致的事件，或对于某些改变忽略发送事件，潜在的将会误导用户。 语法举例请首先看已经加入形式化规约的 Solidity 演示代码： Solidity1234567891011121314151617181920212223242526272829contract Registry &#123; struct Entry &#123; bool set; int data; &#125; // User-defined type mapping(address=&gt;Entry) entries; // State variable /// @notice tracks-changes-in entries /// @notice precondition !entries[at].set /// @notice postcondition entries[at].set &amp;&amp; entries[at].data == value event new_entry(address at, int value); /// @notice tracks-changes-in entries /// @notice precondition entries[at].set &amp;&amp; entries[at].data &lt; value /// @notice postcondition entries[at].set &amp;&amp; entries[at].data == value event updated_entry(address at, int value); /// @notice emits new_entry function add(int value) public &#123; require(!entries[msg.sender].set); entries[msg.sender].set = true; entries[msg.sender].data = value; emit new_entry(msg.sender, value); &#125; /// @notice emits updated_entry function update(int value) public &#123; require(entries[msg.sender].set &amp;&amp; entries[msg.sender].data &lt; value); entries[msg.sender].data = value; emit updated_entry(msg.sender, value); &#125; &#125; 演示代码非常简单，定义了一个 Entry 结构，和一个地址到 Entry 的映射的变量（在文章中叫做状态变量，state variable)；两个事件，一个代表新加入合约，另一个代表更新加入合约。以及添加和更新的函数。 首先，某个事件都跟随的是 entries 变量的变化，因此我们写出： 1&#x2F;&#x2F;&#x2F; @notice tracks-changes-in entries tracks-changes-in 关键字所说明的事实是：事件被触发当且仅当被跟踪的变量改变。由于数据经常以多步过程的形式改变（如例子中，函数依次更新了 Entry 结构中的两个数据），或者数据更新存在某种条件，因此事件不会总是立刻跟在某个追踪变量的改动后。因此，文章提出了前/后检查点的概念。前检查点是由事件所追踪的变量的第一次改变所动态的定义的。相对的，后检查点是一个静态边界，一般是循环或交易的边缘。说白了就是，你的事件必须要在你跟的变量第一次改变之后，离开程序之前进行一次激发。 在跟随变量以外，事件也可以被用 predicates 来注释，它是用状态变量和事件的参数来定义的，并且有两种，preconditions 和 postconditions。前置条件在前检查点前捕捉状态变量的值，而后置条件对应着事件被发送的时刻。 举例来说，对于 new_entry 事件，其要求用户一开始不处于 entries，即set 布尔类型为假，且事件发出后用户属于entries，data 被赋值。 123&#x2F;&#x2F;&#x2F; @notice precondition !entries[at].set&#x2F;&#x2F;&#x2F; @notice postcondition entries[at].set &amp;&amp; entries[at].data &#x3D;&#x3D; value event new_entry(address at, int value); 最后，发射事件的函数必须被标记处发射了何等事件： 1234&#x2F;&#x2F;&#x2F; @notice emits updated_entryfunction update(int value) public &#123;...&#125; 基于函数的形式化规约基于函数的形式化规约和基于事件的有很多相似之处（并且是南大78004870课程所讲述的模式），只是把修改变量的规约放在函数（与合约、循环）前。并且由于函数可以对值进行修改，而非像事件一样仅展现变化，所以会比基于事件的规约增加其他的东西。请看下例： Solidity123456789101112131415161718192021222324/// @notice invariant x == ycontract Track &#123; int x; int y; /// @notice precondition x == y /// @notice postcondition x == (y + n) /// @notice modifies x function add_to_x(int n) internal &#123; x = x + n; require(x &gt;= y); &#125; /// @notice modifies x if n &gt; 0 /// @notice modifies y if n &gt; 0 function add(int n) public &#123; require(n &gt;= 0); add_to_x(n); /// @notice invariant y&lt;=x while(y &lt; x) &#123; y = y + 1; &#125; &#125;&#125; 由例子，我们可以总结出基本的语句： 如果某变量没有被改变，那么需要注明不变式： 1invariant &lt;EXPRESSION&gt; 注意，不变式出现在循环，合约，函数前。 如果函数开始前/结束后必须满足某条件，那么需要注明前置条件/后置条件，与基于事件的一样。 如果函数执行改变了状态变量，那么需要注明修改规约： 1modifies &lt;TARGET&gt; [if &lt;CONDITION&gt;] 进阶的规约表达课程同时给出了一些进阶的规约表达方式，例如： 聚合计算的表达： 1__verifier_sum_&lt;TYPE&gt;( ... ) 所代表了将 &lt;TYPE&gt; 相加所得到的结果。 复合数据类型判等： 1__verifier_eq(..., ...) 其实就是更加复杂的 x == y。 变量旧值引用: 1__verifier_old_&lt;TYPE&gt; 也许是在循环中引用上一次的值或者引用修改前的值。 谓词逻辑表达： 123forall (&lt;VARS&gt;) &lt;QUANTEXPR&gt;exists (&lt;VARS&gt;) &lt;QUANTEXPR&gt; 举例来说： 1forall (uint λ) !(λ &gt;&#x3D; 0 &amp;&amp; λ &lt; length) 总结形式化规约是一种让程序设计更加严谨的实现，而对于对准确度要求高的智能合约来说更加有用。即使没有检查器，掌握形式化合约也有助于形成良好的变量追踪与查询习惯。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"Ethereum","slug":"Ethereum","permalink":"https://n1vk.github.io/tags/Ethereum/"},{"name":"Solidity","slug":"Solidity","permalink":"https://n1vk.github.io/tags/Solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://n1vk.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"}]},{"title":"简单的以太坊智能合约部署","slug":"smart-contract","date":"2022-03-29T02:49:53.000Z","updated":"2022-04-04T16:04:28.276Z","comments":true,"path":"Programming/smart-contract/","link":"","permalink":"https://n1vk.github.io/Programming/smart-contract/","excerpt":"基于 Solidity 合约语言和本地私有链，部署简易的以太坊智能合约的记录。","text":"可以简单的把以太坊虚拟机理解为一个公开使用的后端服务器，用户在其上拥有有限的操作空间，每次操作以交易的形式产生，并会根据修改数据的大小向用户收费，称为 Gas，以此支持服务器维护人员 (即矿工)。并且，服务器上的数据会被永久记录，操作后端数据的代码 (对于EVM，是 Solidity 代码) 也存放在服务器上不能被修改。 矿工可以根据 Gas 和数据操作量选择将哪一笔交易加入区块。因此 Solidity 编程要求存储尽量少的数据，节省空间和操作量，以此得到更快速的响应。 使用 Remix 和 GanacheRemix 是以太坊官方提供的 Solidity 开发环境。在 Remix 内写好代码后可以编译，编译会得到程序的二进制程序接口，称为 ABI。ABI 会提供给 web3.js 来提供操作接口。在编译后可以部署合约，Remix 本身提供了一些 JavaScript 虚拟机来运行智能合约。为了观察到用户和交易的情况，我们可以部署私有链，利用 Ganache。部署后会得到合约地址，你也可以直接在 Remix 和合约交互。 Ganache 可以在本地设置好私有区块链，即开即用。用户可以自行设置端口号，而网络ID为5777而区块链ID为1337。在本地部署好之后，使用 MetaMask 钱包添加私有链。MetaMask 也可以使用其他测试链，虽然其他测试链可以有更多的用户，但在这些链上我们难以观察交易情况。添加私有链后，也记得添加私有链的账户。 说到账户，对于以太坊地址来说，所有链上的地址格式都完全一致。因此，你的任何一个账户都可以在任何链上使用（当然代币不会跟随）。可以尝试把 Ganache 里生成的账户的钱转入一个你主链的地址，操作将会成功且主链地址在私有链上的 ETH 会增加。注意 Ganache 不会追踪除了它生成的账户以外的账户（因为无穷多），但是你仍然可以看到 TX 信息，就在 Ganache 的操作面板。这到底是怎么做到的？得益于钱包地址的随机和海量，生成的两个地址相同的概率几乎是不可能的。 Solidity 代码设计一个 Solidity 代码，对于每个账户存放一个数据，并且允许用户查看数据。 (很遗憾，Hexo 对于 Solidity 代码暂时没有语法高亮，我也不想使用 hightlight.js，所以我随便选用了一种代码高亮模式。) Solidity123456789101112131415161718192021222324252627282930// 声明 License// SPDX-License-Identifier: GPL-3.0// 声明编译器版本pragma solidity &gt;=0.7.0 &lt;0.9.0;// 合约，就像一个类contract numberHolder &#123; // 映射数据结构 mapping(address =&gt; uint16) userNumbers; // 一个事件 event numberSetted(address addr,uint16 num); // 地址的数据的setter函数 function setNumber(uint16 inputNumber) public&#123; userNumbers[msg.sender] = inputNumber; // 发送事件给前端 emit numberSetted(msg.sender, userNumbers[msg.sender]); &#125; // 两个只读函数获得用户地址和数据 function getNumber() public view returns (uint16) &#123; return userNumbers[msg.sender]; &#125; function getAddress() public view returns (address) &#123; return msg.sender; &#125;&#125; 具体内容可以查看 Solidity 的文档。函数发射的事件需要在前端进行监听。关键字 view 代表了这个函数不会操作数据。全局变量 msg 存储了一些当前合约的信息，例如 msg.sender 就是调用合约的地址。 Web 代码Web 端我们使用以太坊 JavaScript API和后端交互，叫做 web3.js，使用此库类似于使用 jQuery 的 ajax。实际上，包括部署合约在内的操作都可以用 web3.js 完成，但本次我们不这样做。 在网页端，首先用简单 HTML 完成界面，给用户提示信息，显示一个可变文本并设置两个按钮： 12345678910111213141516 &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;数字存放&lt;/h1&gt; 在数据框中输入一个数字并点击上传数据，它将会被存储至区块，请注意这会消耗燃料。&lt;br&gt; 点击获得数据将会显示您已经存储的数据，这不会消耗燃料。 &lt;h2 id=&quot;info&quot;&gt;等待输入&lt;/h2&gt; &lt;label for=&quot;data&quot; class=&quot;col-lg-2 control-label&quot;&gt;您的数据&lt;/label&gt; &lt;input id=&quot;data&quot; type=&quot;text&quot;&gt; &lt;button id=&quot;button_update&quot;&gt;上传数据&lt;/button&gt; &lt;button id=&quot;button_download&quot;&gt;获得数据&lt;/button&gt;&lt;/div&gt; 接下来在 &lt;script&gt; 部分设计网页的逻辑。别忘记把 web3.js 和 jQuery 加入到网页中。首先配置好我们的 web3 库： 123456if (typeof web3 !== &#x27;undefined&#x27;) &#123; web3 = new Web3(web3.currentProvider);&#125;else&#123; web3 = new Web3(new Web3.providers.HttpProvider(&quot;http://localhost:8545&quot;));&#125; 这声明了，我们的 web3 是由 HTTP 在本地8545端口提供，也就是我们的 Ganache。接下来： 12345web3.eth.defaultAccount = web3.eth.accounts[0]; var contractABI = web3.eth.contract(/* ABI Here */)var myContract = contractABI.at(&#x27;0x6f0D3623...&#x27;) 第一行代码说明了我们默认交互账户是 Ganache 里的第一个账户。我们现在还不将 MetaMask 链接功能提供在前端。MetaMask 要求前端网页不能是本地打开的，必须运行在一个服务器上 (Python 搭建的简易 HTTP 服务器就可以)，并且需要更复杂且完善的代码。第二行代码需要我们写入之前在 Remix 得到的 ABI，这是我们交互的基础。第三行就是合约本身，从语义上可以理解为：某个 ABI 位于某个确定的地址上。这个地址可以在 Remix 处看到，或在 Ganache 的 TX 信息里找到。 接下来我们来看一下在前端如何调用 Solidity 函数，并用 jQuery 改变前端显示。首先演示一下按钮如何获得数据： 1234567$(&quot;#button_update&quot;).click(function() &#123; myContract.setNumber($(&quot;#data&quot;).val());&#125;);$(&quot;#button_download&quot;).click(function() &#123; $(&quot;#info&quot;).html(&#x27;您的地址：&#x27; + myContract.getAddress.call() + &#x27;&lt;br&gt;&#x27; + &#x27;您存储的数字：&#x27; + myContract.getNumber.call() + &#x27;&lt;br&gt; 操作：读取数字&#x27;)&#125;); 对于 jQuery，简单的语法是利用 $(&quot;#id&quot;) 选中 HTML 对应 ID 的内容，在此是按钮类型。按钮类型具有 click() 方法，我们在内部写出一个函数，意思是“如果按钮被按下，那么执行这个函数，函数的内容是使用合约内的 setNumber() 函数，函数的参数是 HTML 中 ID 为 data 的元素的值”。对于下面获得值的操作，同理。 再来看看怎么监听我们发出的事件： 1234567891011var eventSet = myContract.numberSetted()eventSet.watch(function(error, result)&#123; if(!error) &#123; $(&quot;#info&quot;).html(&#x27;您的地址：&#x27; + result.args.addr + &#x27;&lt;br&gt;&#x27; + &#x27;您存储的数字：&#x27; + result.args.num + &#x27;&lt;br&gt;&#x27; + &#x27;操作：设置数字&#x27;) console.log(result) &#125; else &#123; console.log(error) &#125;&#125;) 基本原理同以上相同，我们将合约的 numberSetted 事件声明成一个变量，对这个变量进行 watch() 方法。里面的函数和刚才的差不多，它具有了两个参数。因为 web3 要求我们进行异常处理，即需要有 if(!error) &#123;&#125; elese &#123;&#125; 的形式。另一个参数 result 里面包含了我们在 Solidity 中写过的两个返回值。如果不太明白，可以在浏览器打开控制台观察一下 log，会完整展现 result 的结构。 网页的样子 总结目前我们的前端已经可以在本地运行了。不过像这样直接链接私有链，利用索引选择调用合约的用户以及函数的处理方式都非常原始，只能作演示用。之后会尽量设计更完善的代码。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"Ethereum","slug":"Ethereum","permalink":"https://n1vk.github.io/tags/Ethereum/"},{"name":"Solidity","slug":"Solidity","permalink":"https://n1vk.github.io/tags/Solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://n1vk.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"}]},{"title":"算法题记录 - 键盘测试","slug":"algorithm-0","date":"2022-03-29T00:00:00.000Z","updated":"2022-04-04T16:04:38.118Z","comments":true,"path":"Note/algorithm-0/","link":"","permalink":"https://n1vk.github.io/Note/algorithm-0/","excerpt":"正向思考不出来的问题，反过来。","text":"羊羊买了新键盘，并邀请大家来试用键盘，但前提是回答出以下问题。 您将获得两个字符串s和t，两者都由小写的英文字母组成。您将逐个字符地键入字符串s，从第一个字符到最后一个字符。 特别之处在于，键入字符时，您可以按Backspace按钮，而不是按与之对应的按钮。Backspace会删除您刚刚键入的最后一个字符（如果您键入的字符串中没有字符，则不执行任何操作）。例如，如果s是”abcbd”，并且您按Backspace而不是键入第一个和第四个字符，您将获得字符串”bd”（第一次按Backspace不删除任何字符，第二次按删除字符”c”）。另一个例子，如果s是”abcaa”，并且您用Backspace键代替最后两个字母，则得到的文本为”a”。 您的任务是确定是否可以通过以上方式，从字符串s获取字符串t. 测试用例第一行是一个整数 q (1≤q≤10^5），代表测试用例的数量。每个测试用例的第一行是字符串s (1≤s的长度≤10^5)，s中的每个字符是小写的英文字母。每个测试用例的第二行是字符串t (1≤t的长度≤10^5)，t中的每个字符是小写的英文字母。 对于每个测试用例，如果可以按本题的方式从s得到t，请打印”YES“,否则，打印“NO”。 Input1234567894abababaabababbaaaaaaaaababaababa Output1234YESNONOYES 初始想法看到题目首先观察了 s 和 t 的联系。首先的想法如下： 对于 s，首先寻找其中所包含的第一个 t[0]。如果没有 t[0]，那么肯定无法输出。 如果有 t[0]，接着去找 t[1]，看看两个字母之间的字母数是不是偶数个（打出，删除，打出，删除…）。如果不是，那么肯定无法输出。 如果还是，那么继续重复以上的步骤，直到 t 越界。 遇到的问题： aababa 和 ababa 无法处理。说明如果 s 存在 t[0]，但完全无效，则应该去除 s 中 t[0] 即其之前的部分，重新进行测试。但是此方法只适用于 t[0]，因为实际上在符合要求的 t[0] 于 s 中出现之前，用户可以什么都不输入只按退格键。并且，这样的方法对于大数据来说太慢了。 本身的算法就非常难设计，需要三个指针，两个位于 s 标定位置，一个位于 t 指向当前的内容。 解决方案反向思考，如果说开头的东西可以忽视会让人难以处理，那么把开头放在最后就好了。同时，我们知道符合要求的字符串 s 的尾部要么和 t 完全一致，要么最后相差偶数个。所以最终的设计是，从 s 和 t 的尾部开始遍历，如果相同就同时前进 1 个字母，再比较；如果不同，则 s 前进2 个字母，再比较。直到 s 或 t 某个字符串结束。最后再判断 t 有没有结束。如果 t 结束了，那么答案就是 YES，此时 s 最开始的部分就是那些我们可以只按退格键的字符。 Python 代码如下： 12345678910111213141516171819202122def special_typing(): stringNum = eval(input()) while(stringNum != 0): stringS = list(input()) stringT = list(input()) comparePointer = len(stringS) - 1 current = len(stringT) - 1 while(current &gt;= 0) and (comparePointer &gt;= 0): if(stringT[current] == stringS[comparePointer]): current -= 1 comparePointer -= 1 else: comparePointer -= 2 if(current &lt; 0): print(&quot;YES&quot;) else: print(&quot;NO&quot;) stringNum -= 1","categories":[{"name":"Note","slug":"Note","permalink":"https://n1vk.github.io/categories/Note/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://n1vk.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://n1vk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"设计模式：基本思想与策略模式","slug":"design-pattern-0","date":"2022-03-28T12:21:57.000Z","updated":"2022-04-16T07:38:55.753Z","comments":true,"path":"Programming/design-pattern-0/","link":"","permalink":"https://n1vk.github.io/Programming/design-pattern-0/","excerpt":"学习 Head First Design Pattern，并试图把书上的废话凝练成我自己的废话。第一部分的内容包括初步认识设计模式，学习基本设计原则以及学习的第一个设计模式：策略(Strategy)模式。","text":"知道继承，接口，多态和虚类不能让你学会面向对象程序设计。理解设计模式，因为设计模式是面向对象开发工程师们多年以来程序设计的经验总结，是为了解决问题而产生的历经验证的工程通用解决方案。良好的设计模式会包含可复用，可扩充，可维护三个特性，而模式可以帮我们做到这点。 首先来举个简单的例子，来展示继承所不能解决的问题。如图，某游戏公司程序员为自己游戏的职业系统设计了一个 Player 超类，所有的职业都会继承这个超类。在继承时，也会继承超类内所有的方法。如果需要新的职业，那么我们就添加一个新的类。完美！ 美丽的UML图 现在公司抛出了新的需求：要求玩家应该会闪避。这很好办，只需要在超类里加入一个 dodge() 方法即可。但是在测试的时候发现了新的问题：牧师会闪避导致了他过于强大的生存能力，以至于不需要队友保护他。这和游戏的设计理念不太符合，公司要求程序员让牧师不再会闪避。这也很简单，把 Priest 的 dodge() 方法的具体实现覆盖成什么都不做就可以了。到目前为止，一切都很好… 直到程序员意识到，公司为了赚钱每个月都会推出一款新职业，他们有的专注攻击不能防御，有的利用防御来攻击，有的……噢还有，公司还会推出氪金装备，使得 Priest 可以有限次的进行闪避动作。天啊，这要怎么办？来看看我们从最初的设计原则可以推出什么。 变与不变应用设计的第一个原则：找出应用中需要变化之处，将其独立，不要和不需要变化的代码写在一起。这样，每次新的需求来到，我们就可以不修改固定的部分，只修改变化的部分。 对于我们的游戏设计来说，我们知道 dodge() 是会随着职业的不同而改变的（当然 attack() 和 defense() 也会变，但是原理是一样的 ）。那么我们把闪避行为拿出来，并为它创建一个类。所有的职业都将 HAS-A 闪避行为。 为谁而写应用设计的第二个原则：针对接口编程，不要针对实现编程。 说真的，我觉得这句话刚一看到非常难理解。 什么是实现？职业类如果实现了 dodge() 接口，那么就意味着所有职业都要实现这个接口，因为他们都继承自原始的超类。我们不要把什么类能实现什么在最开始的时候写死。 怎么针对接口编程？我设计一个 DodgeBehaviour 接口，此接口有 dodge() 方法。现在，我们让具体的类实现这个接口。DodgeNormal 类会正常的躲避，而 DodgeNaught 类什么都不做。现在，闪避行为和 Player 类没有任何关系了。我们可以随意添加闪避行为或者修改行为，比如我们为法师设计一个 DodgeKUXUAN，让闪避的时候会增加粒子效果。 另一个美丽的UML图 完成设计现在事情可能会变得有点奇怪，我们如何让某个职业进行闪避？请看代码： 12345678910public class Player &#123; healthType Health; DodgeBehaviour dodgeBehaviour; //... public void performDodge() &#123; dodgeBehaviour.dodge(); &#125;&#125; 这是我们的超类。看，我们通过让职业 HAS-A 行为的方式成功地托管了闪避行为！这也就引出了我们的第三个设计原则：多用组合，少用继承。HAS-A is better than IS-A! 那么相对应的，子类的代码： 12345public class Priest extends Player &#123; public Priest() &#123; dodgeBehaviour = new DodgeNaught(); &#125;&#125; 在构造函数里面，我们写好 Priest 会使用哪种 实现了 DodgeBahaviour 的类。不仅如此，如果我们对 dodgeBehaviour 设定一个 setter 函数，我们就可以在程序运行时改变牧师躲避的行为，比如牧师装备了氪金道具，那么就将 dodgeBehaviour 设定成可以闪避并计数，结束后改回去。这比写一个 ”可以进行10次闪避” 的 Priest 职业好太多了！ 同理，攻击和防御方法都可以用相同的方式实现。以上的设计模式我们称为策略模式。策略模式定义且封装了独立于使用算法客户的算法族，使他们相互之间能够替换。这也不意味着继承方法真的没用了，比如所有的职业都需要走路，那么 walk() 方法就可以继承。关键点是确立好需求，并选择你需要的设计模式。 （所以，这位程序员该好好跟他的产品经理吵一架 :P ） 总结来看看我们目前学到的东西： 设计原则一：找出应用中需要变化之处，将其独立，不要和不需要变化的代码写在一起。 设计原则二：针对接口编程，不要针对实现编程。 设计原则三：多用组合，少用继承。 策略模式：定义且封装了独立于使用算法客户的算法族，使他们相互之间能够替换。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"}],"tags":[{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]},{"title":"重新记录我的博客","slug":"init_post","date":"2022-03-27T15:34:49.000Z","updated":"2022-04-04T16:04:54.490Z","comments":true,"path":"Thoughts/init_post/","link":"","permalink":"https://n1vk.github.io/Thoughts/init_post/","excerpt":"不要再摸了。","text":"两年前，我抱着玩玩的心态在 Github 上部署了一个小博客。然而搜肠刮肚发现自己既没技术，又没文笔，无甚可写，遂作罢。近日和舍友闲谈，偶然间舍友提到了博客。突然想起了自己曾经弄的小站。再联想到自己最近需要学习，记忆力又狠狠衰退，于是打算把博客重拾起来。为了避免自己又忘记什么重要的事，我把操作博客的方法都写下来。 写作与更新在部署时我就选择了 Hexo 托管页面。Hexo 是一个 Node.js 包，它能够自动生成网页，用户所需要做的只是写作。并且，它支持各种插件与主题。使用如下代码在 /source/_posts/ 内新建一个文件夹与 markdown 文件，名字为name.md。name也将组成这篇博客的 url 路径： 1hexo new name 设置好以后，可以在本地5000端口部署测试页面： 1hexo g &amp;&amp; hexo s 待测试没问题后，push 到 Github 吧： 1hexo clean &amp;&amp; hexo deploy 等待几分钟就可以看到结果。 配置和优化关于配置，可以在 Volantis 文档内找到所有需要的内容，包括底栏侧栏导航栏配置等等。对于 Post 的封面，我使用 Canvas 可画来制作，按照微信公众号的标题随便做一个即可。对于在文章内插图，我使用 SM.MS 图床。 承诺即使发一些毫无意义的 shitpost，我也尽量不会让博客停下来。拖延和懒惰的一部分来自于追求完美，会希望把事情做的足够好的想法，会导致人过分注重细枝末节而最后放弃。","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"https://n1vk.github.io/categories/Thoughts/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://n1vk.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"记录","slug":"记录","permalink":"https://n1vk.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"博客","slug":"博客","permalink":"https://n1vk.github.io/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"cat"}],"categories":[{"name":"Note","slug":"Note","permalink":"https://n1vk.github.io/categories/Note/"},{"name":"Programming","slug":"Programming","permalink":"https://n1vk.github.io/categories/Programming/"},{"name":"Thoughts","slug":"Thoughts","permalink":"https://n1vk.github.io/categories/Thoughts/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://n1vk.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"Java","slug":"Java","permalink":"https://n1vk.github.io/tags/Java/"},{"name":"面向对象","slug":"面向对象","permalink":"https://n1vk.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"Java Virtual Machine","slug":"Java-Virtual-Machine","permalink":"https://n1vk.github.io/tags/Java-Virtual-Machine/"},{"name":"程序设计","slug":"程序设计","permalink":"https://n1vk.github.io/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"设计模式","slug":"设计模式","permalink":"https://n1vk.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"Ethereum","slug":"Ethereum","permalink":"https://n1vk.github.io/tags/Ethereum/"},{"name":"Solidity","slug":"Solidity","permalink":"https://n1vk.github.io/tags/Solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://n1vk.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"name":"Python","slug":"Python","permalink":"https://n1vk.github.io/tags/Python/"},{"name":"算法","slug":"算法","permalink":"https://n1vk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"想法","slug":"想法","permalink":"https://n1vk.github.io/tags/%E6%83%B3%E6%B3%95/"},{"name":"记录","slug":"记录","permalink":"https://n1vk.github.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"博客","slug":"博客","permalink":"https://n1vk.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}